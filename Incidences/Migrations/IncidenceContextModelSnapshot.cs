// <auto-generated />
using System;
using Incidences.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Incidences.Migrations
{
    [DbContext(typeof(IncidenceContext))]
    partial class IncidenceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Incidences.Data.Models.Credentials", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("Incidences.Data.Models.Email", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("employeeId")
                        .IsUnique();

                    b.ToTable("Email");
                });

            modelBuilder.Entity("Incidences.Data.Models.EmailConfig", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<bool>("defaultCredentials")
                        .HasColumnType("bit");

                    b.Property<string>("host")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("port")
                        .HasColumnType("int");

                    b.Property<bool>("ssl")
                        .HasColumnType("bit");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("EmailConfig");
                });

            modelBuilder.Entity("Incidences.Data.Models.Notes", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<int>("incidenceId")
                        .HasColumnType("int");

                    b.Property<string>("noteStr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("noteTypeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("employeeId");

                    b.HasIndex("incidenceId");

                    b.HasIndex("noteTypeId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Incidences.Data.Models.RecoverLog", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("employeeIdId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("employeeIdId");

                    b.ToTable("RecoverLog");
                });

            modelBuilder.Entity("Incidences.Data.Models.employee", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("dni")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("state")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("surname1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surname2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("typeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("typeId");

                    b.ToTable("employee");
                });

            modelBuilder.Entity("Incidences.Data.Models.employee_range", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("employee_range");
                });

            modelBuilder.Entity("Incidences.Data.Models.incidence", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("close_dateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("open_dateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ownerId")
                        .HasColumnType("int");

                    b.Property<int?>("solverId")
                        .HasColumnType("int");

                    b.Property<int>("state")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("id");

                    b.HasIndex("ownerId");

                    b.HasIndex("solverId");

                    b.HasIndex("state");

                    b.ToTable("incidence");
                });

            modelBuilder.Entity("Incidences.Data.Models.incidence_piece_log", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("incidenceId")
                        .HasColumnType("int");

                    b.Property<int>("pieceId")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("id");

                    b.HasIndex("incidenceId");

                    b.HasIndex("pieceId");

                    b.ToTable("incidence_piece_log");
                });

            modelBuilder.Entity("Incidences.Data.Models.note_type", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("note_type");
                });

            modelBuilder.Entity("Incidences.Data.Models.piece_class", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<byte>("deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("typeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("typeId");

                    b.ToTable("piece_class");
                });

            modelBuilder.Entity("Incidences.Data.Models.piece_type", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("piece_type");
                });

            modelBuilder.Entity("Incidences.Data.Models.state", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("state");
                });

            modelBuilder.Entity("Incidences.Data.Models.Email", b =>
                {
                    b.HasOne("Incidences.Data.Models.employee", "Employee")
                        .WithOne("Email")
                        .HasForeignKey("Incidences.Data.Models.Email", "employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Incidences.Data.Models.Notes", b =>
                {
                    b.HasOne("Incidences.Data.Models.employee", "Employee")
                        .WithMany("Notes")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Incidences.Data.Models.incidence", "Incidence")
                        .WithMany("notes")
                        .HasForeignKey("incidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Incidences.Data.Models.note_type", "NoteType")
                        .WithMany()
                        .HasForeignKey("noteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Incidence");

                    b.Navigation("NoteType");
                });

            modelBuilder.Entity("Incidences.Data.Models.RecoverLog", b =>
                {
                    b.HasOne("Incidences.Data.Models.employee", "Employee")
                        .WithMany("logs")
                        .HasForeignKey("employeeIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Incidences.Data.Models.employee", b =>
                {
                    b.HasOne("Incidences.Data.Models.Credentials", "Credentials")
                        .WithMany()
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Incidences.Data.Models.employee_range", "EmployeeRange")
                        .WithMany()
                        .HasForeignKey("typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credentials");

                    b.Navigation("EmployeeRange");
                });

            modelBuilder.Entity("Incidences.Data.Models.incidence", b =>
                {
                    b.HasOne("Incidences.Data.Models.employee", "owner")
                        .WithMany()
                        .HasForeignKey("ownerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Incidences.Data.Models.employee", "solver")
                        .WithMany()
                        .HasForeignKey("solverId");

                    b.HasOne("Incidences.Data.Models.state", "State")
                        .WithMany()
                        .HasForeignKey("state")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("owner");

                    b.Navigation("solver");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Incidences.Data.Models.incidence_piece_log", b =>
                {
                    b.HasOne("Incidences.Data.Models.incidence", null)
                        .WithMany("pieces")
                        .HasForeignKey("incidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Incidences.Data.Models.piece_class", "Piece")
                        .WithMany()
                        .HasForeignKey("pieceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Piece");
                });

            modelBuilder.Entity("Incidences.Data.Models.piece_class", b =>
                {
                    b.HasOne("Incidences.Data.Models.piece_type", "PieceType")
                        .WithMany()
                        .HasForeignKey("typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PieceType");
                });

            modelBuilder.Entity("Incidences.Data.Models.employee", b =>
                {
                    b.Navigation("Email");

                    b.Navigation("logs");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Incidences.Data.Models.incidence", b =>
                {
                    b.Navigation("notes");

                    b.Navigation("pieces");
                });
#pragma warning restore 612, 618
        }
    }
}
